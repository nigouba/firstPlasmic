// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: B7vckeDNfuhFJFpncT3Qs
// Component: 7KA4r2inJnYl

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantswIshgf9Gb3QQ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: wIshgf9GB3qQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: B7vckeDNfuhFJFpncT3Qs/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: 7KA4r2inJnYl/css

import FacebookIcon from "./icons/PlasmicIcon__Facebook"; // plasmic-import: g86xqcwpEgkC/icon
import group11PngNiO9SLpoWSfi from "./images/group11Png.png"; // plasmic-import: niO9sLpoWSfi/picture
import twitterpngY8MntOiCiE from "./images/twitterpng.png"; // plasmic-import: y8MNTOi_ci_E/picture
import linkedinpngT2GHd7Th5FaF from "./images/linkedinpng.png"; // plasmic-import: t2GHd7Th5FaF/picture
import image143P2CvGzrx44P from "./images/image14.png"; // plasmic-import: 3p2cvGZRX44p/picture

createPlasmicElementProxy;

export type PlasmicFooter__VariantMembers = {};
export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  root?: Flex__<"div">;
  links?: Flex__<"section">;
  svg?: Flex__<"svg">;
  instapng?: Flex__<typeof PlasmicImg__>;
  section?: Flex__<"div">;
};

export interface DefaultFooterProps {
  className?: string;
}

const $$ = {};

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswIshgf9Gb3QQ()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"section"}
        data-plasmic-name={"links"}
        data-plasmic-override={overrides.links}
        hasGap={true}
        className={classNames(projectcss.all, sty.links)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__x2C0W)}
        >
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__tQ0YW
            )}
            href={"/"}
          >
            {"Home"}
          </a>
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__srKnu
            )}
            href={"/#services"}
          >
            {"Services"}
          </a>
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__bzxTu
            )}
            href={"/#work"}
          >
            {"Work"}
          </a>
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__ecG3S
            )}
            href={"/#about"}
          >
            {"About"}
          </a>
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link___2WX72
            )}
            href={"/#contact"}
          >
            {"Contact"}
          </a>
        </Stack__>
        <div className={classNames(projectcss.all, sty.columns___1C4K9)}>
          <div className={classNames(projectcss.all, sty.column___7OnBo)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___2IgtN)}
            >
              <a
                aria-label={"Facebook"}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__e8Bak
                )}
                href={"https://www.facebook.com"}
                target={"_blank"}
              >
                <FacebookIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </a>
              <a
                aria-label={"Instagram"}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__bRi9H
                )}
                href={"https://www.instagram.com"}
                target={"_blank"}
              >
                <PlasmicImg__
                  data-plasmic-name={"instapng"}
                  data-plasmic-override={overrides.instapng}
                  alt={""}
                  className={classNames(sty.instapng)}
                  displayHeight={"32px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"32px"}
                  loading={"lazy"}
                  src={{
                    src: group11PngNiO9SLpoWSfi,
                    fullWidth: 326,
                    fullHeight: 326,
                    aspectRatio: undefined
                  }}
                />
              </a>
              <a
                aria-label={"Twitter"}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__jaO
                )}
                href={"https://www.twitter.com"}
                target={"_blank"}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__y9Xp)}
                  displayHeight={"32px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"32px"}
                  loading={"lazy"}
                  src={{
                    src: twitterpngY8MntOiCiE,
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined
                  }}
                />
              </a>
              <a
                aria-label={"Linkedin"}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___8IIeA
                )}
                href={"https://www.linkedin.com"}
                target={"_blank"}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___1JiEg)}
                  displayHeight={"32px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"32px"}
                  loading={"lazy"}
                  src={{
                    src: linkedinpngT2GHd7Th5FaF,
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined
                  }}
                />
              </a>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.column__fXjLj)}>
            <div className={classNames(projectcss.all, sty.freeBox__qguGm)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__rjtGi)}
                displayHeight={"32px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"32px"}
                loading={"lazy"}
                src={{
                  src: image143P2CvGzrx44P,
                  fullWidth: 204,
                  fullHeight: 156,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__a421D
                )}
              >
                {"anna@design.com"}
              </div>
            </div>
          </div>
        </div>
      </Stack__>
      <div
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <div className={classNames(projectcss.all, sty.columns__y0EeV)}>
          <div className={classNames(projectcss.all, sty.column__dA3Jy)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lYV8
              )}
            >
              {"\u00a9 2030 Freelance Portfolio."}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.column__ex22E)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___99L66
              )}
            >
              {"Built by Anna Wu"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.column__dpu4N)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tiOUg
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly")
                ? "Made in Plasmic"
                : "Made in Plasmic"}
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "links", "svg", "instapng", "section"],
  links: ["links", "svg", "instapng"],
  svg: ["svg"],
  instapng: ["instapng"],
  section: ["section"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  links: "section";
  svg: "svg";
  instapng: typeof PlasmicImg__;
  section: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    links: makeNodeComponent("links"),
    svg: makeNodeComponent("svg"),
    instapng: makeNodeComponent("instapng"),
    section: makeNodeComponent("section"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
